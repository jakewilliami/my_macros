#! /bin/bash


# Immediately exits script if nothing is passed to it
if [[ -z "${*}" ]]
then
    HELP="\033[1;33m You must have at least one argument.  Use -h for help. \033[0;38m"
    echo -e "${HELP}"
    exit $?
fi


### DEFINE IMPORTANT DIRECTORIES AND FILE LOCATIONS
BASH_DIR="${HOME}/scripts/bash/"
WORK_DIR="${HOME}/Desktop/Assorted Personal Documents/Work/"
MACROS_DIR="${HOME}/tex-macros/templates/time-sheet/"
ts1="${MACROS_DIR}/ts1"
ts2="${MACROS_DIR}/ts2"
ts3="${MACROS_DIR}/ts3"
ts4="${MACROS_DIR}/ts4"
input1="${MACROS_DIR}/input1"
input2="${MACROS_DIR}/input2"
TIME_SHEET_OLD_DIR="${WORK_DIR}/Time Sheet ${IMMUT_OLD_NO}/"
TIME_SHEET_NEW_DIR="${WORK_DIR}/Time Sheet ${IMMUT_NEW_NO}/"
TIME_SHEET_INPUT_FILE="time-sheet-${IMMUT_OLD_NO}.tex"


### CHECK FOR EXISTENCE OF SOURCEABLE MATERIAL AND CHANGE WORKING DIRECTORY
BASH_DIR_EXISTS=false
[[ ! -d "${BASH_DIR}" ]] && cd ${HOME} && git clone https://github.com/jakewilliami/scripts.git && BASH_DIR_EXISTS=true
[[ $BASH_DIR_EXISTS ]] || exit $?

cd "${WORK_DIR}" || exit $?


# source required scripts
source ${BASH_DIR}/dependencies/source-dependencies.sh


# Help
display_help() {
    help_start 'mkts -i [write up what you have done]; mkts -t' 'The present script will help to create my time-sheets'
    help_commands '-i' '--input' '1' 'Makes directory, and then creates' 'i' 'nput' 'files (for dates and work done).'
    help_commands '-t' '--tex' '1' 'Compiles' 't' 'ex' 'file to produce PDF output.'
    help_commands '-o' '--pen' '1' '\b' 'o' 'pen' '\bs work directory.'
    help_help
    clean-exit
}


# get kernel- and os-specific dependencies
case $KERNEL in
    Darwin)
        is-library-then-install "${GREP_PACKAGE}" "${COREUTILS}"
        OPEN_COMMAND="open"
        ;;
    Linux)
        OPEN_COMMAND="xdg-open"
        ;;
esac


### GET IMPORTANT VALUES
get_latest_timesheet() {
    find "${WORK_DIR}" -type d -print | \
    while IFS= read -r line; do
        echo "${line}"
    done | grep -Eo "[0-9]{1,4}" | sort -nr | head -1
}
TIME_SHEET_OLD_NO=$(get_latest_timesheet)
TIME_SHEET_NEW_NO="$(echo "$(($TIME_SHEET_OLD_NO + 1))")"
IMMUT_OLD_NO="$(echo ${TIME_SHEET_OLD_NO})"
IMMUT_NEW_NO="$(echo ${TIME_SHEET_NEW_NO})"
get_latex_command() {
    if [[ -f /Library/TeX/Root/bin/pdflatex.py ]]; then
        LATEX_COMMAND="/Library/TeX/Root/bin/pdflatex.py --file-line-error --synctex=1 --enable-write18"
    else
        LATEX_COMMAND="pdflatex --file-line-error --synctex=1 --enable-write18"
    fi
    echo "${LATEX_COMMAND}"
}
LATEX_COMMAND="$(get_latex_command)"


make_ts_dir() {
    mkdir "Time Sheet ${IMMUT_NEW_NO}" || clean-exit
}


cd_ts_dir() {
    if [[ -z "${1}" ]]
    then
        cd "${WORK_DIR}/Time Sheet ${IMMUT_NEW_NO}/" || clean-exit
    elif [[ "${1}" == "t" ]]
    then
        cd "${WORK_DIR}/Time Sheet ${IMMUT_OLD_NO}/" || clean-exit
    fi
}


opt_err_no_txt() {
    HELP="${BYELLOW}There is no content to your time sheet.  Please run \`mkts -i\` to add input files.${NORM}"
    echo -e "${HELP}"
	clean-exit
}


make_text() {
    make_ts_dir
    cd_ts_dir
    
    # make files in work directory
    cat "${input1}" > "time-sheet-${IMMUT_NEW_NO}d.txt"
    cat "${input2}" > "time-sheet-${IMMUT_NEW_NO}i.txt"
    
    # Open files for editing
    "${BASH_DIR}"/oinb "time-sheet-${IMMUT_NEW_NO}i.txt"
    "${BASH_DIR}"/oinb "time-sheet-${IMMUT_NEW_NO}d.txt"
    
    clean-exit
}


parse_dates() {
    
    while read -r line || [ -n "${line}" ]; do # reading dates for date header # [ -n "$line" ] required:
                                                # https://stackoverflow.com/questions/12916352/
    
        if [[ ! $line =~ ^%.*$ ]]; then
            
            # Start information
            START_DAY_DATE="$(echo "${line}" | awk -F'--|\\.' '{print $1}')"
            START_MONTH="$(echo "${line}" | awk -F'--|\\.' '{print $2}')"
            START_YEAR="$(echo "${line}" | awk -F'--|\\.' '{print $3}')"
            START_DATE_ALT="${START_YEAR}-${START_MONTH}-${START_DAY_DATE}"
            START_DAY_DAY="$(gdate --date="${START_DAY_DATE_ALT}" +%A)"
            case ${START_DAY_DATE} in
                1?) START_DAY_DATE=${START_DAY_DATE}\\textsuperscript{th} ;;
                *1) START_DAY_DATE=${START_DAY_DATE}\\textsuperscript{st} ;;
                *2) START_DAY_DATE=${START_DAY_DATE}\\textsuperscript{nd} ;;
                *3) START_DAY_DATE=${START_DAY_DATE}\\textsuperscript{rd} ;;
                *)  START_DAY_DATE=${START_DAY_DATE}\\textsuperscript{th} ;;
            esac
            FULL_START="$(gdate --date="${START_DATE_ALT}" "+%A, ${START_DAY_DATE} %B, %Y")"
            
            #End information
            END_DAY_DATE="$(echo "${line}" | awk -F'--|\\.' '{print $4}')"
            END_MONTH="$(echo "${line}" | awk -F'--|\\.' '{print $5}')"
            END_YEAR="$(echo "${line}" | awk -F'--|\\.' '{print $6}')"
            END_DATE_ALT="${END_YEAR}-${END_MONTH}-${END_DAY_DATE}"
            END_DAY_DAY="$(gdate --date="${END_DAY_DATE_ALT}" +%A)"
            case ${END_DAY_DATE} in
                1?) END_DAY_DATE="${END_DAY_DATE}\\textsuperscript{th}" ;;
                *1) END_DAY_DATE="${END_DAY_DATE}\\textsuperscript{st}" ;;
                *2) END_DAY_DATE="${END_DAY_DATE}\\textsuperscript{nd}" ;;
                *3) END_DAY_DATE="${END_DAY_DATE}\\textsuperscript{rd}" ;;
                *)  END_DAY_DATE="${END_DAY_DATE}\\textsuperscript{th}" ;;
            esac
            FULL_END="$(gdate --date="${END_DATE_ALT}" "+%A, ${END_DAY_DATE} %B, %Y")"
            
            #Write to file
            echo "\\textbf{Week Beginning:} ${FULL_START}\\\\\\textbf{Week Ending:} ${FULL_END}" >> "time-sheet-${IMMUT_OLD_NO}.tex"
        fi
        
    done < "time-sheet-${IMMUT_OLD_NO}d.txt"
    
}


parse_duties() {
    
    while read -r line || [ -n "${line}" ]; do # reading duties # [ -n "$line" ] required:
                                                    # https://stackoverflow.com/questions/12916352/
    
        if [[ ! $line =~ ^%.*$ ]]; then
            
            # pull raw input
            RAW_DATE="$(echo "${line}" | awk -F'\\|' '{print $1}')"
            RAW_DUTY="$(echo "${line}" | awk -F'\\|' '{print $2}')"
            RAW_DIRECTOR="$(echo "${line}" | awk -F'\\|' '{print $3}')"
            RAW_TIME_FRAME="$(echo "${line}" | awk -F'\\|' '{print $4}')"
            
            if [[ "$(echo "${line}" | ggrep --only-matching -- -- | wc -l)" -eq 1 ]]; then
                
                DATE="$(echo "${line}" | awk -F'--|\\|' '{print $1}')"
                START_TIME="$(echo "${line}" | awk -F'--|\\|' '{print $4}')"
                END_TIME="$(echo "${line}" | awk -F'--|\\|' '{print $5}')"
                
                DAY="$(echo "${DATE}" | awk -F'.' '{print $1}')"
                MONTH="$(echo "${DATE}" | awk -F'.' '{print $2}')"
                YEAR=""$(echo "${DATE}" | awk -F'.' '{print $3}')""
                
                PARSE_START_DATE_TIME="${YEAR}-${MONTH}-${DAY} ${START_TIME}"
                PARSE_END_DATE_TIME="${YEAR}-${MONTH}-${DAY} ${END_TIME}"
                
                EPOCH_START="$(gdate --date="${PARSE_START_DATE_TIME}" +%s)"
                EPOCH_END="$(gdate --date="${PARSE_END_DATE_TIME}" +%s)"
                EPOCH_SPAN="$(echo $((${EPOCH_END} - ${EPOCH_START})))"
                    
            else
                
                START_DATE="$(echo "${line}" | awk -F'--|\\|' '{print $1}')"
                END_DATE="$(echo "${line}" | awk -F'--|\\|' '{print $2}')"
                START_TIME="$(echo "${line}" | awk -F'--|\\|' '{print $5}')"
                END_TIME="$(echo "${line}" | awk -F'--|\\|' '{print $6}')"
                
                START_DAY="$(echo "${START_DATE}" | awk -F'.' '{print $1}')"
                START_MONTH="$(echo "${START_DATE}" | awk -F'.' '{print $2}')"
                START_YEAR="$(echo "${START_DATE}" | awk -F'.' '{print $3}')"
                END_DAY="$(echo "${END_DATE}" | awk -F'.' '{print $1}')"
                END_MONTH="$(echo "${END_DATE}" | awk -F'.' '{print $2}')"
                END_YEAR="$(echo "${END_DATE}" | awk -F'.' '{print $3}')"
                
                PARSE_START_DATE_TIME="${START_YEAR}-${START_MONTH}-${START_DAY} ${START_TIME}"
                PARSE_END_DATE_TIME="${END_YEAR}-${END_MONTH}-${END_DAY} ${END_TIME}"
                
                EPOCH_SPAN_START="$(gdate --date="${PARSE_START_DATE_TIME}" +%s)"
                EPOCH_SPAN_END="$(gdate --date="${PARSE_END_DATE_TIME}" +%s)"
                EPOCH_SPAN="$(echo $((${EPOCH_SPAN_END} - ${EPOCH_SPAN_START})))" # gdate adds a day (86400 seconds) onto this output for some reason
                
                
            fi
            
            TIME_FRAME_TO_HOURS="$(echo "scale=2; ${EPOCH_SPAN} / 3600" | bc -l | awk '{printf "%.2f\n", $0}')" # need bc here because number could be decimal
            
            # write duty to file
            echo "\\textbf{${RAW_DATE}}&${RAW_DUTY}&${RAW_DIRECTOR}&${RAW_TIME_FRAME}&${TIME_FRAME_TO_HOURS}\\\\" >> "time-sheet-${IMMUT_OLD_NO}.tex"
            
        fi
        
    done < "time-sheet-${IMMUT_OLD_NO}i.txt"
    
}


total_time_worked() {
    # get lines that end with a double backslash (escaped lots); remove whitespace;
    # remove double backslash; grep for numbers only; get stream from standard input; add them up
    awk -F'&|\\\\\\\\$' '
        { print $5 }
    ' ~/Desktop/Assorted\ Personal\ Documents/Work/Time\ Sheet\ 23/time-sheet-23.tex | \
    awk 'NF { print $0 }' | \
    grep -Eo '^[0-9]{1,4}.*$' | \
    paste -sd+ - | \
    bc
}


make_tex() {
    cd_ts_dir t # why would I need to go to the old directory????  Ohhhh, I think
                # it is because when I call IMMUT_OLD_NO after making the new one,
                # it needs to know that the old directory is NOW the new one???
                    
    if [[ -s "time-sheet-${IMMUT_OLD_NO}i.txt" ]] && [[ -s "time-sheet-${IMMUT_OLD_NO}d.txt" ]]
    then
        # write preamble to tex file
        cat "${ts1}" >> "time-sheet-${IMMUT_OLD_NO}.tex"
        # write date header to file
        parse_dates
        # write table header to file
        cat ${ts2} >> "time-sheet-${IMMUT_OLD_NO}.tex"
        # write duties input to file
        parse_duties
        # write table footer to file
        cat ${ts3} >> "time-sheet-${IMMUT_OLD_NO}.tex"
        # caclulate total time and write to file
        TOT_TIME="$(total_time_worked)"
        echo $TOT_TIME >> "time-sheet-${IMMUT_OLD_NO}.tex"
        # write document footer to file
        cat ${ts4} >> "time-sheet-${IMMUT_OLD_NO}.tex"
        
        # compile pdf
        ${LATEX_COMMAND} "time-sheet-${IMMUT_OLD_NO}.tex" > /dev/null
        
        # open pdf for viewing/quality checking
        ${OPEN_COMMAND} "time-sheet-${IMMUT_OLD_NO}.pdf"
        
        clean-exit
    else
        opt_err_no_txt
    fi
    
}


while getopts ":-:tioh" OPTION; do
        case $OPTION in
                -)
                    case $OPTARG in
                        open)
                            open "${WORK_DIR}" ;;
                        tex)
                            make_tex ;;
                        input)
                            make_text ;;
                        help)
                            display_help ;;
                        *)
                            opt_err ;;
                    esac ;;
                o)
                    open "${WORK_DIR}" ;;
                t)
                    make_tex ;;
                i)
                    make_text ;;
                h)
                    display_help ;;
                *)
                    opt_err ;;
        esac
done


# If no options
if [[ -z $1 ]]
then
    opt_err_no_opt
fi


# Clean up
clean-exit
